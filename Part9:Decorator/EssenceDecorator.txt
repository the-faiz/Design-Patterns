Problem Statment: Suppose you are working in an HFT firm and you get to know that there exists a class called strategy which has varoius functionalities. Now you want to add some different functionalities to the classs for your own code but you don't have access to the source code. This is where decorators come in.

1. Want to augment an object with additional functionality
2. Do not want to rewrite or alter existing code (Open closed principle => All classes should be open to extension bu closen to modification)
3. Want to keep new functionality seprate (Single Responsibility Principle)
4. Need to be able to interact with existing structures
5. Two options:
    a. Aggregate the decorate object
    b. Inherit from the decorated object


===> Decorator -> Facilitates the addition of behaviors to individual objects

A dynamic decoratro keeps the reference to the decorated object
A static decorator uses mixin inheritance 
Both approaches allow limitledd composition



